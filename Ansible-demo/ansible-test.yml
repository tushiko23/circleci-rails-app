AWSTemplateFormatVersion: "2010-09-09"
Description: Create Security Group with Cloudformation templates  for Ansible Control Node and Target Node 

Parameters:
  NameBase:
    Description: "this is base name"
    Type: String
    Default: Ansible-test

  SgIngCidrIpHTTP:
    Type: String
    Default: '0.0.0.0/0'

  SgIngFromPortHTTP:
    Type: String
    Default: '80'

  SgIngCidrIpSSH:
    Type: String
    Default: '0.0.0.0/0' 

  SgIngFromPortSSH:
    Type: String
    Default: '22'

  SGNameControlNode:
    Type: String
    Default: 'control-node-sg'

  SGNameTargetNode:
    Type: String
    Default: "target-node-sg"

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "test-key"

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small

  EC2InstanceAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: The AMI ID for the EC2 instance

Resources:
  ControlNodeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Create-ControlNode-Security-Group
      GroupName: !Ref SGNameControlNode
      VpcId: !ImportValue Rails-app-project-VPCid
      Tags:
        - Key: "Name"
          Value: !Ref NameBase

  ControlNodeSGIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ControlNodeSG
      IpProtocol: tcp
      FromPort: !Ref SgIngFromPortHTTP
      ToPort: !Ref SgIngFromPortHTTP
      CidrIp: !Ref SgIngCidrIpHTTP

  ControlNodeSGIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ControlNodeSG
      IpProtocol: tcp
      FromPort: !Ref SgIngFromPortSSH
      ToPort: !Ref SgIngFromPortSSH
      CidrIp: !Ref SgIngCidrIpSSH

  TargetNodeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Create-ControlNode-Security-Group
      GroupName: !Ref SGNameTargetNode
      VpcId: !ImportValue Rails-app-project-VPCid
      Tags:
        - Key: "Name"
          Value: !Ref NameBase

  TargetNodeSGIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref TargetNodeSG
      IpProtocol: tcp
      FromPort: !Ref SgIngFromPortHTTP
      ToPort: !Ref SgIngFromPortHTTP
      CidrIp: !Ref SgIngCidrIpHTTP

  TargetNodeSGIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref TargetNodeSG
      IpProtocol: tcp
      FromPort: !Ref SgIngFromPortSSH
      ToPort: !Ref SgIngFromPortSSH
      CidrIp: !Ref SgIngCidrIpSSH

  ControlNodeEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref "InstanceTypeParameter"
      ImageId: "ami-0cae67c5bf8369eb7"
      KeyName: !Ref "KeyPairName"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !ImportValue "Rails-app-project-PublicSubnet1id"
          GroupSet:
            - !Ref  "ControlNodeSG"
      UserData: 
        Fn::Base64: |
          #!/bin/bash -xe
          sudo yum update -y
          sudo amazon-linux-extras install ansible2 -y
      Tags:
        - Key: Name
          Value: !Sub "${NameBase}-ControlNodeEC2"

  TargetNodeEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref "InstanceTypeParameter"
      ImageId: !Ref "EC2InstanceAMI"
      KeyName: !Ref "KeyPairName"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !ImportValue "Rails-app-project-PublicSubnet2id"
          GroupSet:
            - !Ref  "TargetNodeSG"
      Tags:
        - Key: Name
          Value: !Sub "${NameBase}-TargetNodeEC2"
  
  ControlNodeElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${NameBase}-ControlNodeEIP"

  ControlNodeIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref ControlNodeEC2
      EIP: !Ref ControlNodeElasticIP

  TargetNodeElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${NameBase}-TargetNodeEIP"

  TargetNodeIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref TargetNodeEC2
      EIP: !Ref TargetNodeElasticIP

Outputs:
  ControlNodeSGId:
    Description: "ID of the Control Node security group"
    Value: !Ref ControlNodeSG
    Export:
      Name: !Sub "${NameBase}-ControlNodeSG"

  TargetNodeSGId:
    Description: "ID of the second security group"
    Value: !Ref TargetNodeSG
    Export:
      Name: !Sub "${NameBase}-TargetNodeSG"

  ControlNodeInstanceId:
    Description: "ID of the ControlNode Instance Id"
    Value: !Ref ControlNodeEC2
    Export:
      Name: !Sub "${NameBase}-ControlNodeEC2"

  ControlNodeInstancePublicIp:
    Description: The public IP address of the Control Node EC2 instance
    Value: !GetAtt ControlNodeEC2.PublicIp

  TargetNodeInstanceId:
    Description: "ID of the ControlNode Instance Id"
    Value: !Ref TargetNodeEC2
    Export:
      Name: !Sub "${NameBase}-TargetNodeEC2"

  TargetNodeInstancePublicIp:
    Description: The public IP address of the Target Node EC2 instance
    Value: !GetAtt TargetNodeEC2.PublicIp
